float colorToFloat(float3 color)
{
	const float3 byte_to_float=float3(1.0,1.0/256,1.0/(256*256));
	return dot(color,byte_to_float);
}

struct v2f {
	float3 vPos : POSITION,
	float2 texCoord : TEXCOORD
};

f2s LightingStageFS(
	v2f IN,
	uniform sampler2D normalMap,			// Normal map
	uniform sampler2D diffuseMap,			// Diffuse map
	uniform sampler2D specularMap,			// Specular map
	uniform sampler2D depthMap,				// Depth map
	uniform float4 lightPos,				// Light position
	uniform float3 lightColor,				// Light color
	uniform float2 planes					// Near and far plane information
	)
{
	// Depth
	float depth = colorToFloat(tex2D(depth_map,IN.texCoord));
	// View direction
	float3 view = normalize(IN.vPos);			
	// Position
	float3 pos;
	pos.z = -planes.y/(planes.x+depth);
	pos.xy = view.xy/view.z*pos.z;
	// Normal
	float3 normal = tex2D(normalMap,IN.texCoord)-0.5;
	float len = length(normal);
	if (len>0.1)
	{
		normal /= len;
	}
	else
	{
		normal = 0;
	}
	// Material information
	float3 diffuse = tex2D(diffuse_map,IN.texcoord);
	float4 specular = tex2D(specular_map,IN.texcoord);
	// Lighting equation (see listing 2)
	float3 final_color = lighting(lightcolor,lightpos.xyz,
	lightpos.w,pos,normal,diffuse,specular.xyz,specular.w);
	// Return the final color
	return float4(final_color,1.0);
}